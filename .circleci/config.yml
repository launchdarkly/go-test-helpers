version: 2.1

orbs:
  win: circleci/windows@1.0.0

workflows:
  workflow:
    jobs:
      - go-test:
          name: Go 1.13
          docker-image: circleci/golang:1.13
          # We can't run the linter in Go 1.12 or 13 because of a known issue with build tags not working
          # correctly in golangci-lint: the linter uses the build tags that *the linter* was built with,
          # rather than the current environment, and there's some Go library code that relies on build tags.
          run-lint: false
      - go-test:
          name: Go 1.12
          docker-image: circleci/golang:1.12
          run-lint: false
      - go-test:
          name: Go 1.11
          docker-image: circleci/golang:1.11
      - go-test:
          name: Go 1.10
          docker-image: circleci/golang:1.10
      - go-test:
          name: Go 1.9
          docker-image: circleci/golang:1.9
      - go-test:
          name: Go 1.8
          docker-image: circleci/golang:1.8
      - go-test-windows:
          name: Windows

jobs:
  go-test:
    parameters:
      run-lint:
        type: boolean
        default: true
      docker-image:
        type: string

    docker:
      - image: <<parameters.docker-image>>
        environment:
          CIRCLE_TEST_REPORTS: /tmp/circle-reports
          CIRCLE_ARTIFACTS: /tmp/circle-artifacts
          COMMON_GO_PACKAGES: >
            github.com/golang/dep/cmd/dep
            github.com/jstemmer/go-junit-report
      - image: redis
      - image: consul
      - image: amazon/dynamodb-local

    working_directory: /go/src/github.com/launchdarkly/go-test-helpers

    steps:
      - checkout
      - run: go get -u $COMMON_GO_PACKAGES
      - when:
          condition: <<parameters.run-lint>>
          steps:
            - run: make lint
      - run: dep ensure -dry-run
      - run: go build ./...
      
      - run:
          name: Run tests
          command: |
            mkdir -p $CIRCLE_TEST_REPORTS
            mkdir -p $CIRCLE_ARTIFACTS
            trap "go-junit-report < $CIRCLE_ARTIFACTS/report.txt > $CIRCLE_TEST_REPORTS/junit.xml" EXIT
            make test | tee $CIRCLE_ARTIFACTS/report.txt

      - store_test_results:
          path: /tmp/circle-reports

      - store_artifacts:
          path: /tmp/circle-artifacts

  go-test-windows:
    executor:
      name: win/vs2019
      shell: powershell.exe

    environment:
      GOPATH: C:\Users\VssAdministrator\go
      PACKAGE_PATH: github.com/launchdarkly/go-test-helpers

    steps:
      - checkout
      - run: go version
      - run:
          name: move source
          command: |
            go env GOPATH
            mkdir ${env:GOPATH}\src\${env:PACKAGE_PATH}
            mv * ${env:GOPATH}\src\${env:PACKAGE_PATH}\
      - run:
          name: setup DynamoDB
          command: |
            $ProgressPreference = "SilentlyContinue"  # prevents console errors from CircleCI host when we use iwr
            iwr -outf dynamo.zip https://s3-us-west-2.amazonaws.com/dynamodb-local/dynamodb_local_latest.zip
            mkdir dynamo
            Expand-Archive -Path dynamo.zip -DestinationPath dynamo
            cd dynamo
            javaw -D"java.library.path=./DynamoDBLocal_lib" -jar DynamoDBLocal.jar
          background: true
      - run:
          name: setup Consul
          command: |
            $ProgressPreference = "SilentlyContinue"
            iwr -outf consul.zip https://releases.hashicorp.com/consul/1.4.2/consul_1.4.2_windows_amd64.zip
            mkdir consul
            Expand-Archive -Path consul.zip -DestinationPath consul
            cd consul
            sc.exe create "Consul" binPath="$(Get-Location)/consul.exe agent -dev"
            sc.exe start "Consul"
      - run:
          name: setup Redis
          command: |
            $ProgressPreference = "SilentlyContinue"
            iwr -outf redis.zip https://github.com/MicrosoftArchive/redis/releases/download/win-3.0.504/Redis-x64-3.0.504.zip
            mkdir redis
            Expand-Archive -Path redis.zip -DestinationPath redis
            cd redis
            ./redis-server --service-install
            ./redis-server --service-start
      - run:
          name: build and test
          command: |
            cd ${env:GOPATH}\src\${env:PACKAGE_PATH}
            go test -race ./...
